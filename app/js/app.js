/**
 * Provides Skrifa's functionality.
 *
 * This file contains core functionality for Skrifa, functions and initialValue
 * settings are declared here.
 */


// Show the loading screen with a custom message
function wait(message){
	$_('[data-view]').removeClass("active");
	$_('[data-view="loading"] h2').text(message);
	$_('[data-view="loading"]').addClass("active");
}

// Show a given view
function show(view){
	$_('[data-view]').removeClass("active");
	$_('[data-view="' + view + '"]').addClass("active");
}

function encrypt(data){
	encryptOptions.data = data;
	return openpgp.encrypt(encryptOptions);
}

function decrypt(data){
	decryptOptions.message = openpgp.message.readArmored(data);
	return openpgp.decrypt(decryptOptions);
}

function loadNotes(){
	if(key != null){
		$_("[data-content='note-container']").html("");
		$_("[data-content='welcome']").hide();
		wait("Loading your notes");
		db.transaction('r', db.note, function() {
			var ht = "";
			db.note.where("Notebook").equals(notebook).count(function(count){
				if(count <= 0){
					$_("[data-content='welcome']").show();
				}
			});
			db.note.where("Notebook").equals(notebook).each(function(item, cursor){
				var item = item;

				decrypt(item.Title).then(function(plaintext) {

					$_("[data-content='note-container']").append("<article data-color='" + item.Color + "' draggable='true' data-nid='"+item.id+"'><div class='content' ><h2>" + plaintext.data + "</h2></div><div class='note-actions'><span class='fa fa-eye' data-id='" + item.id + "' data-action='preview'></span><span class='fa-pencil fa' data-id='"+item.id+"' data-action='edit'></span><span class='fa-trash fa' data-id='"+item.id+"' data-action='delete'></span></div></article>");

					$_(".list article").each(function(element){
						$_(element).style("border-color", $_(element).data("color"));
					});

					$_(".grid article").each(function(element){
						$_(element).style("background", $_(element).data("color"));
					});
				});
			});
		}).then(function(){
			show("notes");
		});
	}
}

function loadNotebooks(){
	return new Promise((resolve, reject) => {
		wait("Wait while your notebooks are decrypted");
		if(key != null){
			$_("[data-content='notebook-list']").html("");
			$_("[data-content='notebook-list']").append('<li data-notebook="Inbox">Inbox</li>');
			var notebooksTemp = [];
			db.transaction('r', db.notebook, function() {
				db.notebook.each(function(item, cursor){

					decrypt(item.Name).then(function(plaintext) {
						notebooksTemp.push({
							id: item.id,
							Name: plaintext.data
						});
					});

				});
			}).then(function(){
				notebooksTemp.sort(function(a, b){
					var A = a.Name.toLowerCase();
					var B = b.Name.toLowerCase();
					if (A < B){
						return -1;
					}
					if(A > B){
						return 1;
					}
					return 0;
				});
				for(var i in notebooksTemp){
					$_("[data-content='notebook-list']").append('<li data-notebook="' + notebooksTemp[i].id + '">' + notebooksTemp[i].Name + '</li>');
				}
				resolve();
			});
		}
	});
}

function loadContent(){
	loadNotebooks().then(() => {
		loadNotes();
	});
}

function getSelectionText() {
    var text = "";
    if(window.getSelection){
        text = window.getSelection().toString();
    }else if(document.selection && document.selection.type != "Control"){
        text = document.selection.createRange().text;
    }
    return text;
}

// Clean the HTML code generated by the Content Editable
function cleanHTML(html){
	return html.replace(/(<\/span>|<span style=\"line-height: 1.5em;\">)/g, '').replace(/<div>/g, '<p>').replace(/<\/div>/g, '</p>\r\n').replace(/<p><br><\/p>/g, '').replace(/&nbsp;/g, ' ');
}

$_ready(function(){

	$_("[data-action='edit-notebook']").hide();
	$_("[data-action='delete-notebook']").hide();

	for(var key in Prism.languages){
		$_("[data-form='insert-snippet'] select").append("<option value='" + key + "'>"+ Text.capitalize(key) +"</option>");
	}

	if(Storage.get("PrivKey") != null){
		show("decrypt");
	}

	if(Storage.get("view") != null){

		if(Storage.get("view") == "list"){
			$_("[data-content='note-container']").removeClass("grid");
			$_("[data-content='note-container']").addClass("list");
			$_("[data-action='change-view']").removeClass("fa-th-list");
			$_("[data-action='change-view']").addClass("fa-th");
		}
	}

	$_(".menu-icon").click(function(){
		if($_("[data-view='" +$_(this).data("menu") + "'] .side-nav").isVisible()){
			$("[data-view='" +$_(this).data("menu") + "'] .side-nav").removeClass("active");
		}else{
			$("[data-view='" +$_(this).data("menu") + "'] .side-nav").addClass("active");
		}
	});

	$_("[data-view='settings'] [type='reset']").click(function(){
		show("notes");
	});

});